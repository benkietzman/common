/* -*- c++ -*- */
///////////////////////////////////////////
// BitMessage
// -------------------------------------
// file       : BitMessage
// author     : Ben Kietzman
// begin      : 2013-08-21
// copyright  : Ben Kietzman
// email      : ben@kietzman.org
///////////////////////////////////////////
/*! \file BitMessage
* \brief BitMessage Functions
*/
#ifndef _COMMON_BITMESSAGE_
#define _COMMON_BITMESSAGE_
// {{{ includes
#include <cmath>
#include <cstring>
#include <map>
#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <openssl/sha.h>
#include <vector>
#include <xmlrpc-c/base.h>
#include <xmlrpc-c/client.h>
using namespace std;
#include "Json"
// }}}
extern "C++"
{
  namespace common
  {
    // {{{ BitMessage
    //! Interfaces with the PyBitmessage client.
    /*!
    * Uses the XML-RPC API access to interface with the PyBitmessage client.
    */
    class BitMessage
    {
      private:
      list<string> m_trash;
      string m_strUrl;
      xmlrpc_env m_env;
      xmlrpc_server_info *m_pServerInfo;

      int is_base64(char c);

      public:
      BitMessage();
      ~BitMessage();
      bool add(const string strA, const string strB, string &strResult, string &strError);
      void decodeBase64(string strIn, string &strOut);
      void encodeBase64(string strIn, string &strOut);
      bool getAllInboxMessages(const string strAccount, vector<map<string, string> > &message, string &strError);
      bool getAllInboxMessages(vector<map<string, string> > &message, string &strError);
      bool getAllSentMessages(const string strAccount, vector<map<string, string> > &message, string &strError);
      bool getAllSentMessages(vector<map<string, string> > &message, string &strError);
      void getTrashedMessages(list<string> &trash);
      bool helloWorld(const string strA, const string strB, string &strResult, string &strError);
      bool listAddresses(vector<map<string, string> > &address, string &strError);
      bool sendBroadcast(const string strFrom, const string strSubject, const string strMessage, string &strError);
      bool sendMessage(const string strTo, const string strFrom, const string strSubject, const string strMessage, string &strError);
      void setCredentials(const string strUser, const string strPassword, const string strServer, const string strPort);
      void trashMessage(const string strMsgID);
      bool trashMessages();
      void untrashMessage(const string strMsgID);
    };
    // }}}
  }
}
#endif
