/* -*- c++ -*- */
///////////////////////////////////////////
// IRC
// -------------------------------------
// file       : Irc
// author     : Ben Kietzman
// begin      : 2012-11-23
// copyright  : Ben Kietzman
// email      : ben@kietzman.org
///////////////////////////////////////////
/*! \file Irc
* \brief Irc Class
*/
#ifndef _COMMON_IRC_
#define _COMMON_IRC_
// {{{ includes
#include <cerrno>
#include <cstring>
#include <iostream>
#include <list>
#include <netdb.h>
#include <openssl/err.h>
#include <openssl/ssl.h>
#include <poll.h>
#include <sstream>
#include <string>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
using namespace std;
#include "Utility"
// }}}

extern int errno;

extern "C++"
{
  namespace common
  {
    // {{{ Irc
    //! Implements the IRC class.
    /*!
    * Provides an interface to IRC servers.
    */
    class Irc
    {
      private:
      bool m_bConnected;
      bool m_bQuit;
      bool m_bSSL;
      int m_fdSocket;
      list<string> m_room;
      list<string> m_message;
      SSL *m_ssl;
      SSL_CTX *m_ctx;
      SSL_METHOD *m_method;
      string m_strBuffer;
      string m_strName;
      string m_strNick;
      string m_strPort;
      string m_strServer;
      string m_strUser;
      unsigned int m_unIndex;
      Utility *m_pUtility;

      /*! \fn list<string>::iterator findRoom(const string strRoom)
      * \brief Finds a room in the list of joined rooms.
      * \return Returns the found iterator from the list of rooms.
      */
      list<string>::iterator findRoom(const string strRoom);
      /*! \fn bool next(string &strMessage, string &strError, const long lSec = 0)
      * \brief Retrieves a server message.
      * \param strMessage Contains the message.
      * \param strError Contains the error message.
      * \param lSec Contains the number of seconds to sleep during read.
      * \return Returns a boolean true/false value.
      */
      bool read(string &strMessage, string &strError, const long lSec = 0);
      /*! \fn ssize_t write(const string strBuffer, string &strError)
      * \brief Writes data to the server.
      * \param strBuffer Contains the data to be written.
      * \param strError Contains the error message.
      * \return Returns the number of bytes written.
      */
      ssize_t write(const string strBuffer, string &strError);
      /*! \fn ssize_t write(const char *pszBuffer, size_t nSize, string &strError)
      * \brief Writes data to the server.
      * \param pszBuffer Contains the data to be written.
      * \param nSize Contains the size of the data to be written.
      * \param strError Contains the error message.
      * \return Returns the number of bytes written.
      */
      ssize_t write(const char *pszBuffer, size_t nSize, string &strError);

      public:
      Irc(string &strError);
      ~Irc();

      /*! \fn bool chat(const string strLocation, const string strMessage, string &strError)
      * \brief Sends a chat message.
      * \param strLocation Contains the user or chat room.
      * \param strMessage Contains the message.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool chat(const string strLocation, const string strMessage, string &strError);
      /*! \fn bool connect(string &strError)
      * \brief Connects to the server.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool connect(string &strError);
      /*! \fn bool connect(const string strServer, const string strPort, string &strError, const bool bSSL = false) 
      * \brief Connects to the server.
      * \param strServer Contains the server.
      * \param strPort Contains the port number.
      * \param strError Contains the error message.
      * \param bSSL Contains the SSL option.
      * \return Returns a boolean true/false value.
      */
      bool connect(const string strServer, const string strPort, string &strError, const bool bSSL = false);
      /*! \fn void disconnect(string &strError)
      * \brief disconnects from the server.
      * \param strError Contains the error message.
      */
      void disconnect(string &strError);
      /*! \fn void enableSSL(const bool bEnable = true)
      * \brief Enables/disables SSL.
      */
      void enableSSL(const bool bEnable = true);
      /*! \fn int getFD()
      * \brief Gets the file descriptor.
      * \return Returns the file descriptor.
      */
      int getFD();
      /*! \fn string getNick()
      * \brief Gets the nickname.
      * \return Returns the nickname.
      */
      string getNick();
      /*! \fn string getPort()
      * \brief Gets the port number.
      * \return Returns the port number.
      */
      string getPort();
      /*! \fn string getServer()
      * \brief Gets the server.
      * \return Returns the server.
      */
      string getServer();
      /*! \fn SSL *getSSL()
      * \brief Gets the SSL handle.
      * \return Returns the SSL handle.
      */
      SSL *getSSL();
      /*! \fn bool good()
      * \brief Determines if the socket handle is good.
      * \return Returns a boolean true/false value.
      */
      bool good();
      /*! \fn bool invite(const string strNick, const string strRoom, string &strError)
      * \brief Joins a chat room.
      * \param strNick Contains the nickname.
      * \param strRoom Contains the chat room.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool invite(const string strNick, const string strRoom, string &strError);
      /*! \fn bool join(const string strRoom, string &strError)
      * \brief Joins a chat room.
      * \param strRoom Contains the chat room.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool join(const string strRoom, string &strError);
      /*! \fn bool next(string &strMessage, string &strError, const long lSec = 0)
      * \brief Retrieves a server message.
      * \param strMessage Contains the message.
      * \param strError Contains the error message.
      * \param lSec Contains the number of seconds to sleep during read.
      * \return Returns a boolean true/false value.
      */
      bool next(string &strMessage, string &strError, const long lSec = 0);
      /*! \fn bool nick(const string strNick, string &strError, string strUser = "", string strName = "", const int nMode = 0)
      * \brief Sets the nickname.
      * \param strNick Contains the nickname.
      * \param strError Contains the error message.
      * \param strUser Contains the user ID.
      * \param strName Contains the real name.
      * \param nMode Contains the mode.
      * \return Returns a boolean true/false value;
      */
      bool nick(const string strNick, string &strError, string strUser = "", string strName = "", const int nMode = 0);
      /*! \fn bool part(const string strRoom, string &strError)
      * \brief Leaves a chat room.
      * \param strRoom Contains the chat room.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool part(const string strRoom, string &strError);
      /*! \fn bool quit(string &strError, const string strReason = "")
      * \brief Quits the server.
      * \param strError Contains the error message.
      * \param strReason Contains the reason.
      * \return Returns a boolean true/false value.
      */
      bool quit(string &strError, const string strReason = "");
      /*! \fn void setPort(const string strPort)
      * \brief Sets the port number.
      * \param strPort Contains the port number.
      */
      void setPort(const string strPort);
      /*! \fn void setServer(const string strPort)
      * \brief Sets the server.
      * \param strServer Contains the server.
      */
      void setServer(const string strServer);
    };
    // }}}
  }
}
#endif
