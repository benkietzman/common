// vim: syntax=cpp
// vim600: fdm=marker
/* -*- c++ -*- */
///////////////////////////////////////////
// Logger
// -------------------------------------
// file       : Logger
// author     : Ben Kietzman
// begin      : 2023-05-18
// copyright  : kietzman.org
// email      : ben@kietzman.org
///////////////////////////////////////////

/**************************************************************************
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 2 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
**************************************************************************/

/*! \file Logger
* \brief Logger Class
*/
#ifndef _COMMON_LOGGER_
#define _COMMON_LOGGER_
// {{{ includes
#include <fcntl.h>
#include <fstream>
#include <iostream>
#include <list>
#include <mutex>
#include <netdb.h>
#include <openssl/err.h>
#include <openssl/ssl.h>
#include <poll.h>
#include <pthread.h>
#ifdef COMMON_LINUX
#include <semaphore.h>
#endif
#include <string>
#ifdef COMMON_SOLARIS
#include <synch.h>
#endif
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <thread>
#include <vector>
using namespace std;
#include "Json"
#include "StringManip"
#include "Utility"
// }}}
extern "C++"
{
  namespace common
  {
    // {{{ loggerreqdata
    struct loggerreqdata
    {
      bool bSent;
      int fdSocket;
      string strBuffer[2];
    };
    // }}}
    // {{{ Logger
    //! Interfaces with Logger.
    /*!
    * Provides an interface to Logger.
    */
    class Logger
    {
      protected:
      bool m_bUseSingleSocket;
      map<int, loggerreqdata *> m_requests;
      size_t m_unThrottle;
      size_t m_unUniqueID;
      std::mutex m_mutexGetAddrInfo;
      std::mutex m_mutexRequests;
      std::mutex m_mutexUnique;
      string m_strApplication;
      string m_strPassword;
      string m_strServer;
      string m_strTimeout;
      string m_strUser;
      thread *m_pThreadRequest;
      time_t m_ulModifyTime;
      StringManip m_manip;
      Utility *m_pUtility;

      public:
      Logger(string &strError);
      ~Logger();

      /*! \fn bool log(map<string, string> label, const string strMessage, string &strError)
      * \brief Sends a log request.
      * \param label Contains the labels.
      * \param strMessage Contains the message.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool log(map<string, string> label, const string strMessage, string &strError);
      /*! \fn bool message(map<string, string> label, const string strMessage, string &strError)
      * \brief Sends a message request.
      * \param label Contains the labels.
      * \param strMessage Contains the message.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool message(map<string, string> label, const string strMessage, string &strError);
      /*! \fn bool request(Json *ptRequest, Json *ptResponse, string &strError)
      * \brief Submits a Logger request.
      * \param ptRequest Contains request.
      * \param ptResponse Contains response.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool request(Json *ptRequest, Json *ptResponse, string &strError);
      /*! \fn bool request(Json *ptRequest, Json *ptResponse, time_t CTimeout, string &strError)
      * \brief Submits a Logger request.
      * \param ptRequest Contains request.
      * \param ptResponse Contains response.
      * \param CTimeout Contains the timeout.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool request(Json *ptRequest, Json *ptResponse, time_t CTimeout, string &strError);
      /*! \fn void requestThread()
      * \brief Request thread.
      */
      void requestThread();
      /*! \fn void setCredentials(const string strApplication, const string strUser, const string strPassword)
      * \brief Set the credentials.
      * \param strApplication Contains the application.
      * \param strUser Contains the user.
      * \param strPassword Contains the password.
      */
      void setCredentials(const string strApplication, const string strUser, const string strPassword);
      /*! \fn void setServer(const string strServer)
      * \brief Set the server.
      * \param strServer Contains the server.
      */
      void setServer(const string strServer);
      /*! \fn void setThrottle(const size_t unThrottle)
      * \brief Set the throttle.
      * \param unThrottle Contains the throttle.
      */
      void setThrottle(const size_t unThrottle);
      /*! \fn void setTimeout(const string strTimeout)
      * \brief Set the timeout.
      * \param strTimeout Contains the timeout.
      */
      void setTimeout(const string strTimeout);
      /*! \fn void useSingleSocket(const bool bUseSingleSocket = true)
      * \brief Use single socket.  This should only be enabled within non-forking environments.
      * \param bUseSingleSocket Contains the single socket value.
      */
      void useSingleSocket(const bool bUseSingleSocket = true);
      /*! \fn Utility *utility()
      * \brief Interfaces with the Utility class.
      * \return Returns a pointer to the Utility class.
      */
      Utility *utility();
    };
    // }}}
  }
}
#endif
