// vim: syntax=cpp
// vim600: fdm=marker
/* -*- c++ -*- */
///////////////////////////////////////////
// Password
// -------------------------------------
// file       : Password
// author     : Ben Kietzman
// begin      : 2021-04-08
// copyright  : kietzman.org
// email      : ben@kietzman.org
///////////////////////////////////////////

/**************************************************************************
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 2 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
**************************************************************************/

/*! \file Password
* \brief Password Class
*/
#ifndef _COMMON_PASSWORD_
#define _COMMON_PASSWORD_
// {{{ includes
#include <fcntl.h>
#include <fstream>
#include <iostream>
#include <list>
#include <mutex>
#include <poll.h>
#include <pthread.h>
#include <string>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/un.h>
#include <thread>
#include <vector>
using namespace std;
#include "File"
#include "Json"
#include "StringManip"
#include "Utility"
// }}}
extern "C++"
{
  namespace common
  {
    // {{{ passreqdata
    struct passreqdata
    {
      bool bSent;
      int fdUnix;
      string strBuffer[2];
    };
    // }}}
    // {{{ Password
    //! Interfaces with Password.
    /*!
    * Provides an interfaces to Password.
    */
    class Password
    {
      protected:
      bool m_bUseSingleSocket;
      bool m_bThrottle;
      bool m_bTimestamp;
      map<int, passreqdata *> m_requests;
      size_t m_unThrottle;
      size_t m_unUniqueID;
      mutex m_mutexGetAddrInfo;
      mutex m_mutexRequests;
      mutex m_mutexUnique;
      string m_strApplication;
      string m_strPrefix;
      string m_strTimeout;
      string m_strUnix;
      thread *m_pThreadRequest;
      time_t m_ulModifyTime;
      File m_file;
      StringManip m_manip;
      Utility *m_pUtility;

      public:
      Password(const string strUnix, string &strError);
      ~Password();

      /*! \fn bool request(Json *ptRequest, Json *ptResponse, string &strError)
      * \brief Submits a Password request.
      * \param ptRequest Contains the request.
      * \param ptResponse Contains the response.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool request(Json *ptRequest, Json *ptResponse, string &strError);
      /*! \fn bool request(Json *ptRequest, Json *ptResponse, time_t CTimeout, string &strError)
      * \brief Submits a Password request.
      * \param ptRequest Contains the request.
      * \param ptResponse Contains the response.
      * \param CTimeout Contains the timeout.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool request(Json *ptRequest, Json *ptResponse, time_t CTimeout, string &strError);
      /*! \fn void requestThread()
      * \brief Request thread.
      */
      void requestThread();
      /*! \fn void setApplication(const string strApplication)
      * \brief Set the application.
      * \param strApplication Contains the application.
      */
      void setApplication(const string strApplication);
      /*! \fn void setTimeout(const string strTimeout)
      * \brief Set the timeout.
      * \param strTimeout Contains the timeout.
      */
      void setTimeout(const string strTimeout);
      /*! \fn void useSingleSocket(const bool bUseSingleSocket = true)
      * \brief Use single socket.  This should only be enabled within non-forking environments.
      * \param bUseSingleSocket Contains the single socket value.
      */
      void useSingleSocket(const bool bUseSingleSocket = true);
      /*! \fn Utility *utility()
      * \brief Interfaces with the Utility class.
      * \return Returns a pointer to the Utility class.
      */
      Utility *utility();
    };
    // }}}
  }
}
#endif
