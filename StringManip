// vim: syntax=cpp
// vim600: fdm=marker
/* -*- c++ -*- */
///////////////////////////////////////////
// StringManip
// -------------------------------------
// file       : StringManip
// author     : Ben Kietzman
// begin      : 2010-03-03
// copyright  : kietzman.org
// email      : ben@kietzman.org
///////////////////////////////////////////

/**************************************************************************
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 2 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
**************************************************************************/

/*! \file StringManip
* \brief StringManip Class
*/

#ifndef _COMMON_STRINGMANIP_
#define _COMMON_STRINGMANIP_
// {{{ includes
#ifdef COMMON_B64
#ifndef BUFFERSIZE
#define BUFFERSIZE 16777216
#endif
#include <b64/decode.h>
#include <b64/encode.h>
#endif
#include <cerrno>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <map>
#ifdef COMMON_OPENSSL
#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <openssl/sha.h>
#endif
#include <sstream>
#include <string>
using namespace std;
// }}}
extern "C++"
{
  namespace common
  {
    // {{{ StringManip
    //! Performs various string manipulations.
    class StringManip
    {
      private:
      int isBase64(char c);
      string pad(string &, const string, const char, const int, const int);
      string toCase(string &, const string, int);

      public:
      StringManip();
      ~StringManip();
      string cleanNonPrintable(string &strClean, const string strString);
      string decodeBase64(string strIn, string &strOut);
			string decryptAes(const string strIn, const string strSecret, string &strOut, string &strError);
      string encodeBase64(string strIn, string &strOut);
      string encryptAes(const string strIn, const string strSecret, string &strOut, string &strError);
      string escape(const string strIn, string &strOut);
      string getToken(string &strToken, const string strString, const int nIndex, const string strDelimiter, const bool bIgnoreBlanks = false);
      string htmlEntityDecode(const string strOld, string &strNew);
      string htmlEntityEncode(const string strOld, string &strNew);
      bool isNumeric(const string strValue);
      string lpad(string &strPad, const string strString, const char cPad, const int nPad);
      string ltrim(string &strTrim, const string strString);
      string purgeChar(string &strPurge, const string strString, const string strChar);
      string rpad(string &strPad, const string strString, const char cPad, const int nPad);
      string rtrim(string &strTrim, const string strString);
      string toLower(string &strLower, const string strString);
      string toShort(float fNumber, string &strNumber, const size_t unPrecision = 0);
      string toShortByte(float fNumber, string &strNumber, const size_t unPrecision = 0);
      string toString(const string strValue, string &strResult);
      string toString(const unsigned int unValue, string &strResult);
      string toString(const int nValue, string &strResult);
      string toString(const float fValue, string &strResult);
      string toString(const double dValue, string &strResult);
      string toString(const unsigned long ulValue, string &strResult);
      string toString(const long lValue, string &strResult);
      string toString(const unsigned long long ullValue, string &strResult);
      string toString(const long long llValue, string &strResult);
      string toString(const char cValue, string &strResult);
      string toString(const char szValue[], string &strResult);
      string toUpper(string &strUpper, const string strString);
      string trim(string &strTrim, const string strString, const int nSide = 0);
      string urlDecode(string &strDecoded, const string strData);
      string urlEncode(string &strEncoded, const string strData);
    };
    // }}}
  }
}
#endif
