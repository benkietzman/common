// vim: syntax=cpp
// vim600: fdm=marker
/* -*- c++ -*- */
///////////////////////////////////////////
// Warden
// -------------------------------------
// file       : Warden
// author     : Ben Kietzman
// begin      : 2021-04-08
// copyright  : kietzman.org
// email      : ben@kietzman.org
///////////////////////////////////////////

/**************************************************************************
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 2 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
**************************************************************************/

/*! \file Warden
* \brief Warden Class
*/
#ifndef _COMMON_WARDEN_
#define _COMMON_WARDEN_
// {{{ includes
#include <fcntl.h>
#include <fstream>
#include <iostream>
#include <list>
#include <mutex>
#include <poll.h>
#include <pthread.h>
#include <string>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/un.h>
#include <thread>
using namespace std;
#include "Json"
#include "ServiceJunction"
#include "Utility"
// }}}
extern "C++"
{
  namespace common
  {
    // {{{ wardenreqdata
    struct wardenreqdata
    {
      bool bSent;
      int fdUnix;
      string strBuffer[2];
    };
    // }}}
    // {{{ Warden
    //! Interfaces with Warden.
    /*!
    * Provides an interfaces to Warden.
    */
    class Warden
    {
      protected:
      bool m_bUseSingleSocket;
      map<int, wardenreqdata *> m_requests;
      size_t m_unUniqueID;
      mutex m_mutexRequests;
      mutex m_mutexUnique;
      string m_strApplication;
      string m_strTimeout;
      string m_strUnix;
      thread *m_pThreadRequest;
      ServiceJunction *m_pJunction;
      Utility *m_pUtility;

      public:
      Warden(const string strApplication, const string strUnix, string &strError);
      ~Warden();

      /*! \fn bool authn(Json *ptData, string &strError)
      * \brief Submits an authentication request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool authn(Json *ptData, string &strError);
      /*! \fn bool authz(Json *ptData, string &strError)
      * \brief Submits an authorization request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool authz(Json *ptData, string &strError);
      /*! \fn bool bridge(Json *ptData, string &strError)
      * \brief Submits a bridge request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool bridge(Json *ptData, string &strError);
      /*! \fn bool bridge(const string strUser, const string strPassword, string &strError)
      * \brief Submits a bridge request.
      * \param strUser Contains the user.
      * \param strPassword Contains the password.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool bridge(const string strUser, const string strPassword, string &strError);
      /*! \fn bool bridge(const string strUser, const string strPassword, Json *ptData, string &strError)
      * \brief Submits a bridge request.
      * \param strUser Contains the user.
      * \param strPassword Contains the password.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool bridge(const string strUser, const string strPassword, Json *ptData, string &strError);
      /*! \fn bool central(Json *ptData, string &strError)
      * \brief Submits a central request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool central(Json *ptData, string &strError);
      /*! \fn bool central(const string strUser, Json *ptData, string &strError)
      * \brief Submits a central request.
      * \param strUser Contains the user.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool central(const string strUser, Json *ptData, string &strError);
      /*! \fn bool password(Json *ptData, string &strError)
      * \brief Submits a password request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool password(Json *ptData, string &strError);
      /*! \fn bool password(const string strApplication, const string strUser, const string strPassword, const string strType, string &strError)
      * \brief Submits a password request.
      * \param strApplication Contains the application.
      * \param strUser Contains the user.
      * \param strPassword Contains the password.
      * \param strType Contains the type.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool password(const string strApplication, const string strUser, const string strPassword, const string strType, string &strError);
      /*! \fn bool password(const string strUser, const string strPassword, string &strError)
      * \brief Submits a password request.
      * \param strUser Contains the user.
      * \param strPassword Contains the password.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool password(const string strUser, const string strPassword, string &strError);
      /*! \fn bool request(const string strModule, Json *ptData, string &strError)
      * \brief Submits a Warden request.
      * \param strModule Contains the module.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool request(const string strModule, Json *ptData, string &strError);
      /*! \fn bool request(Json *ptRequest, Json *ptResponse, string &strError)
      * \brief Submits a Warden request.
      * \param ptRequest Contains the request.
      * \param ptResponse Contains the response.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool request(Json *ptRequest, Json *ptResponse, string &strError);
      /*! \fn bool request(Json *ptRequest, Json *ptResponse, time_t CTimeout, string &strError)
      * \brief Submits a Warden request.
      * \param ptRequest Contains the request.
      * \param ptResponse Contains the response.
      * \param CTimeout Contains the timeout.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool request(Json *ptRequest, Json *ptResponse, time_t CTimeout, string &strError);
      /*! \fn void requestThread()
      * \brief Request thread.
      */
      void requestThread();
      /*! \fn void setApplication(const string strApplication)
      * \brief Set the application.
      * \param strApplication Contains the application.
      */
      void setApplication(const string strApplication);
      /*! \fn void setTimeout(const string strTimeout)
      * \brief Set the timeout.
      * \param strTimeout Contains the timeout.
      */
      void setTimeout(const string strTimeout);
      /*! \fn void useSingleSocket(const bool bUseSingleSocket = true)
      * \brief Use single socket.  This should only be enabled within non-forking environments.
      * \param bUseSingleSocket Contains the single socket value.
      */
      void useSingleSocket(const bool bUseSingleSocket = true);
      /*! \fn Utility *utility()
      * \brief Interfaces with the Utility class.
      * \return Returns a pointer to the Utility class.
      */
      Utility *utility();
      /*! \fn bool vault(const string strFunction, list<string> keys, Json *ptData, string &strError)
      * \brief Submits a vault request.
      * \param strFunction Contains the function.
      * \param keys Contains the keys.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vault(const string strFunction, list<string> keys, Json *ptData, string &strError);
      /*! \fn bool vaultAdd(list<string> keys, Json *ptData, string &strError)
      * \brief Submits a vault add request.
      * \param keys Contains the keys.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultAdd(list<string> keys, Json *ptData, string &strError);
      /*! \fn bool vaultAdd(Json *ptData, string &strError)
      * \brief Submits a vault add request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultAdd(Json *ptData, string &strError);
      /*! \fn bool vaultDelete(list<string> keys, string &strError)
      * \brief Submits a vault delete request.
      * \param keys Contains the keys.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultRemove(list<string> keys, string &strError);
      /*! \fn bool vaultRemove(string &strError)
      * \brief Submits a vault remove request.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultRemove(string &strError);
      /*! \fn bool vaultRetrieve(list<string> keys, string &strData, string &strError)
      * \brief Submits a vault retrieve request.
      * \param keys Contains the keys.
      * \param strData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultRetrieve(list<string> keys, string &strData, string &strError);
      /*! \fn bool vaultRetrieve(list<string> keys, Json *ptData, string &strError)
      * \brief Submits a vault retrieve request.
      * \param keys Contains the keys.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultRetrieve(list<string> keys, Json *ptData, string &strError);
      /*! \fn bool vaultRetrieve(Json *ptData, string &strError)
      * \brief Submits a vault retrieve request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultRetrieve(Json *ptData, string &strError);
      /*! \fn bool vaultRetrieveKeys(list<string> keys, Json *ptData, string &strError)
      * \brief Submits a vault retrieveKeys request.
      * \param keys Contains the keys.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultRetrieveKeys(list<string> keys, Json *ptData, string &strError);
      /*! \fn bool vaultRetrieveKeys(Json *ptData, string &strError)
      * \brief Submits a vault retrieveKeys request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultRetrieveKeys(Json *ptData, string &strError);
      /*! \fn bool vaultUpdate(list<string> keys, Json *ptData, string &strError)
      * \brief Submits a vault update request.
      * \param keys Contains the keys.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultUpdate(list<string> keys, Json *ptData, string &strError);
      /*! \fn bool vaultUpdate(Json *ptData, string &strError)
      * \brief Submits a vault update request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool vaultUpdate(Json *ptData, string &strError);
      /*! \fn bool windows(Json *ptData, string &strError)
      * \brief Submits a windows request.
      * \param ptData Contains the data.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool windows(Json *ptData, string &strError);
      /*! \fn bool windows(const string strUser, const string strPassword, string &strError)
      * \brief Submits a windows request.
      * \param strUser Contains the user.
      * \param strPassword Contains the password.
      * \param strError Contains the error message.
      * \return Returns a boolean true/false value.
      */
      bool windows(const string strUser, const string strPassword, string &strError);
    };
    // }}}
  }
}
#endif
